package {{.Package}}_test

import (
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

  {{range .DefaultImports}}{{printf "%q" .}}
  {{end}}
  {{range $key, $value := .Imports}}{{$key}} {{ printf "%q" $value}}
  {{end}}
 {{if .Params}}
  utils "github.com/maximilien/swagger-cf/utils"
  {{end}}
)

var _ = Describe("#{{.Name}}", func() {
	var (
		{{.Name}}Result bool
		{{.Name}}Err    error
	)

	Context("when {{.Name}} succeed", func() {
		BeforeEach(func() {
			{{.Name}}Err = nil
			{{.Name}}Result = true
		})

		It("{{.Name}} {{.Principal}} returns {{.ReturnsMap}}", func() {
			{{if .Params}}
			parameters, err := utils.ReadTestFixtures("{{.Name}}.json")
			Expect(err).ToNot(HaveOccurred())
			{{end}}
			httpClient := utils.NewHttpClient("username", "apiKey")
			response, {{.Name}}Err := httpClient.DoRawHttpRequest("v2/{{.Name}}","PUT",{{if .Params}} parameters{{else}}new(bytes.Buffer){{end}})
				if strings.Contains(string(response), "404") {
					{{.Name}}Result = false
				}
			Expect({{.Name}}Err).ToNot(HaveOccurred())
			Expect({{.Name}}Result).To(BeTrue())
			
		})
	})


Context("when {{.Name}} fail", func() {
		BeforeEach(func() {
			{{.Name}}Err = nil
			{{.Name}}Result = false
		})
{{if .Params}}
	Context("when parameters are empty", func() {
			It("PUT /v2/{{.Name}} with empty parameters", func() {
				httpClient := utils.NewHttpClient("username", "apiKey")
				response, {{.Name}}Err := httpClient.DoRawHttpRequest("v2/{{.Name}}", "PUT", new(bytes.Buffer))
				if strings.Contains(string(response), "404") {
					{{.Name}}Result = false
				}

				Expect({{.Name}}Err).ToNot(HaveOccurred())
				Expect({{.Name}}Result).ToNot(BeTrue())
			})
		})
	{{end}}	
Context("when HTTP method is incorrect", func() {
			It("PATCH /v2/{{.Name}} fails with 404", func() {
				httpClient := utils.NewHttpClient("username", "apiKey")
				response, {{.Name}}Err := httpClient.DoRawHttpRequest("v2/{{.Name}}", "PATCH", new(bytes.Buffer))
				if strings.Contains(string(response), "404") {
					{{.Name}}Result = false
				}

				Expect({{.Name}}Err).ToNot(HaveOccurred())
				Expect({{.Name}}Result).ToNot(BeTrue())
			})

			It("POST /v2/{{.Name}} fails with 404", func() {
				httpClient := utils.NewHttpClient("username", "apiKey")
				response, {{.Name}}Err := httpClient.DoRawHttpRequest("v2/{{.Name}}", "POST", new(bytes.Buffer))
				if strings.Contains(string(response), "404") {
					{{.Name}}Result = false
				}

				Expect({{.Name}}Err).ToNot(HaveOccurred())
				Expect({{.Name}}Result).ToNot(BeTrue())
			})
		})
	})
})
